{"version":3,"sources":["chat/ChatItem.js","firebase/firebase.js","chat/ChatBody.js","chat/ChatInput.js","chat/courses.js","chat/chat.js","sidebar/sidebarbuttons.js","sidebar/sidebar.js","App.js","index.js"],"names":["ChatItem","props","type","style","marginTop","justifyContent","className","display","author","toUpperCase","content","textAlign","backgroundColor","borderRadius","color","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","ENDPOINT","ChatBody","messageList","state","list","prevAuthor","course","channel","prevProps","this","setState","collection","where","get","then","snapshot","forEach","doc","id","channelList","console","log","data","messages","push","key","uniqid","text","socketIOClient","on","msg","message","position","marginRight","React","Component","ChatInput","handleChange","event","target","value","handleClick","channelChoice","channels","nextNum","nummessages","set","update","socket","emit","handleKeyPress","e","undefined","onKeyPress","autoComplete","placeholder","onChange","onClick","SelectBlock","styled","Select","height","fontSize","padding","paddingLeft","fontFamily","Courses","handleSelect","selectedOption","click","clientCount","num","disableUnderline","MenuItem","Chat","getCourseSelect","selected","currentRoomType","courseid","currentCourseID","authorInstance","allRooms","body","roomId","input","idContainer","SideBarButton","classNameOuter","background","SideBar","buttons","allCourses","map","index","changeCurrentCourseID","imageSrc","imageLink","App","courseID","tempAllCourses","allCoursesList","i","length","courseTitle","randomColor","Math","floor","random","toString","roomType","begin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.850f19e9.chunk.js","sourcesContent":["import React from 'react'\r\nimport './chat.css'\r\n\r\nfunction ChatItem(props) {\r\n    if (props.type == 1) {\r\n        return (\r\n            <div style={{marginTop: props.marginTop, justifyContent: \"flex-start\"}}className= \"chat-item\">\r\n                <div className= \"chat-item-content-container\">\r\n                    <p style={{display: props.display}} className= \"chat-item-author\">{props.author.toUpperCase()}</p>\r\n                    <div className= \"chat-background\">\r\n                        <p className= \"chat-item-content\">{props.content}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div style={{marginTop: props.marginTop, justifyContent: \"flex-end\"}} className= \"chat-item\">\r\n            <div style={{justifyContent: \"flex-end\"}} className= \"chat-item-content-container\">\r\n                <p style={{display: props.display, textAlign: \"right\"}} className= \"chat-item-author\">{props.author.toUpperCase()}</p>\r\n                <div style={{backgroundColor: \"rgba(28, 55, 91, 0.8)\", borderRadius: \"15px 0px 15px 15px\"}}className= \"chat-background\">\r\n                    <p style={{color: \"white\", textAlign: \"right\"}} className= \"chat-item-content\">{props.content}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default ChatItem;","import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyBNb-YQUa3Zxme22MioYmfpTYYfAXQBRYY\",\r\n    authDomain: \"thyme-bf149.firebaseapp.com\",\r\n    databaseURL: \"https://thyme-bf149.firebaseio.com\",\r\n    projectId: \"thyme-bf149\",\r\n    storageBucket: \"thyme-bf149.appspot.com\",\r\n    messagingSenderId: \"176639028068\",\r\n    appId: \"1:176639028068:web:cc31cf132c1305ff8ea871\"\r\n})\r\n\r\nconst db = firebaseApp.firestore()\r\n\r\nexport { db }","import React from 'react'\r\nimport './chat.css';\r\nimport ChatItem from './ChatItem'\r\nimport socketIOClient from 'socket.io-client'\r\nimport uniqid from 'uniqid'\r\nimport {db} from '../firebase/firebase'\r\nimport { Scrollbars } from 'react-custom-scrollbars'\r\n\r\nconst ENDPOINT = 'https://ec2-52-91-127-119.compute-1.amazonaws.com:8000/'\r\n\r\nclass ChatBody extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.messageList = []\r\n        this.state = {\r\n            list : [],\r\n            prevAuthor: \"undefined\",\r\n            course: this.props.course,\r\n            channel: this.props.channel\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.course == this.props.course) {\r\n            return false\r\n        }\r\n\r\n        this.setState({\r\n            list: [],\r\n            prevAuthor: \"undefined\"\r\n        })\r\n        this.messageList = []\r\n        \r\n        db.collection(\"courses\").where(\"courseid\", \"==\", this.props.course).get().then((snapshot) => {\r\n            // grabs the course\r\n            snapshot.forEach(course => {\r\n                // grabs the channels from the course course\r\n                db.collection(\"courses\").doc(course.id).collection(\"channels\").where(\"channelid\", \"==\", this.props.channel).get().then((channelList) => {\r\n                    channelList.forEach(channel => {\r\n                        console.log(channel.data())\r\n                        db.collection(\"courses\").doc(course.id).collection(\"channels\").doc(channel.id).collection(\"messages\").get().then(messages => {\r\n                            messages.forEach(doc => {\r\n                                if (this.state.prevAuthor == doc.data().author) {\r\n                                    if (this.props.author == doc.data().author) {\r\n                                        this.messageList.push(<ChatItem type={2} marginTop=\"5px\" display=\"none\" key={uniqid()} author={doc.data().author} content={doc.data().text}></ChatItem>)\r\n                                    } else {\r\n                                        this.messageList.push(<ChatItem type={1} marginTop=\"5px\" display=\"none\" key={uniqid()} author={doc.data().author} content={doc.data().text}></ChatItem>)\r\n                                    }\r\n                                } else {\r\n                                    if (this.props.author == doc.data().author) {\r\n                                        this.messageList.push(<ChatItem type={2} marginTop=\"7.5px\" display=\"block\" key={uniqid()} author={doc.data().author} content={doc.data().text}></ChatItem>)\r\n                                    }\r\n                                    else {\r\n                                        this.messageList.push(<ChatItem type={1} marginTop=\"7.5px\" display=\"block\" key={uniqid()} author={doc.data().author} content={doc.data().text}></ChatItem>)\r\n                                    }\r\n                                }\r\n                                this.setState({\r\n                                    list: this.messageList,\r\n                                    prevAuthor: doc.data().author\r\n                                })\r\n                            })  \r\n                        })\r\n                    })\r\n                    \r\n                })\r\n            })\r\n        })\r\n\r\n\r\n        const socket = socketIOClient(ENDPOINT)\r\n        socket.on('chat message', (msg) => {\r\n            if (this.state.prevAuthor == msg.author) {\r\n                if (this.props.author == msg.author) {\r\n                    this.messageList.push(<ChatItem type={2} marginTop=\"5px\" display=\"none\" key={uniqid()} author={msg.author} content={msg.message}></ChatItem>)\r\n                } else {\r\n                    this.messageList.push(<ChatItem type={1} marginTop=\"5px\" display=\"none\" key={uniqid()} author={msg.author} content={msg.message}></ChatItem>)\r\n                }\r\n            } else {\r\n                if (this.props.author == msg.author) {\r\n                    this.messageList.push(<ChatItem type={2} marginTop=\"7.5px\" display=\"block\" key={uniqid()} author={msg.author} content={msg.message}></ChatItem>)\r\n                } else {\r\n                    this.messageList.push(<ChatItem type={1} marginTop=\"7.5px\" display=\"block\" key={uniqid()} author={msg.author} content={msg.message}></ChatItem>)\r\n                }\r\n            }\r\n            this.setState({\r\n                list: this.messageList,\r\n                prevAuthor: msg.author\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        // finds matching course in the catalog\r\n        db.collection(\"courses\").where(\"courseid\", \"==\", this.props.course).get().then((snapshot) => {\r\n            // grabs the course\r\n            snapshot.forEach(course => {\r\n                // grabs the channels from the course course\r\n                db.collection(\"courses\").doc(course.id).collection(\"channels\").where(\"channelid\", \"==\", this.props.channel).get().then((channelList) => {\r\n                    channelList.forEach(channel => {\r\n                        db.collection(\"courses\").doc(course.id).collection(\"channels\").doc(channel.id).collection(\"messages\").get().then(messages => {\r\n                            messages.forEach(doc => {\r\n                                if (this.state.prevAuthor == doc.data().author) {\r\n                                    if (this.props.author == doc.data().author) {\r\n                                        this.messageList.push(<ChatItem type={2} marginTop=\"5px\" display=\"none\" key={uniqid()} author={doc.data().author} content={doc.data().text}></ChatItem>)\r\n                                    } else {\r\n                                        this.messageList.push(<ChatItem type={1} marginTop=\"5px\" display=\"none\" key={uniqid()} author={doc.data().author} content={doc.data().text}></ChatItem>)\r\n                                    }\r\n                                } else {\r\n                                    if (this.props.author == doc.data().author) {\r\n                                        this.messageList.push(<ChatItem type={2} marginTop=\"7.5px\" display=\"block\" key={uniqid()} author={doc.data().author} content={doc.data().text}></ChatItem>)\r\n                                    }\r\n                                    else {\r\n                                        this.messageList.push(<ChatItem type={1} marginTop=\"7.5px\" display=\"block\" key={uniqid()} author={doc.data().author} content={doc.data().text}></ChatItem>)\r\n                                    }\r\n                                }\r\n                                this.setState({\r\n                                    list: this.messageList,\r\n                                    prevAuthor: doc.data().author\r\n                                })\r\n                            })  \r\n                        })\r\n                    })\r\n                    \r\n                })\r\n            })\r\n        })\r\n        \r\n        const socket = socketIOClient(ENDPOINT)\r\n        socket.on('chat message', (msg) => {\r\n            if (this.state.prevAuthor == msg.author) {\r\n                if (this.props.author == msg.author) {\r\n                    this.messageList.push(<ChatItem type={2} marginTop=\"5px\" display=\"none\" key={uniqid()} author={msg.author} content={msg.message}></ChatItem>)\r\n                } else {\r\n                    this.messageList.push(<ChatItem type={1} marginTop=\"5px\" display=\"none\" key={uniqid()} author={msg.author} content={msg.message}></ChatItem>)\r\n                }\r\n            } else {\r\n                if (this.props.author == msg.author) {\r\n                    this.messageList.push(<ChatItem type={2} marginTop=\"7.5px\" display=\"block\" key={uniqid()} author={msg.author} content={msg.message}></ChatItem>)\r\n                } else {\r\n                    this.messageList.push(<ChatItem type={1} marginTop=\"7.5px\" display=\"block\" key={uniqid()} author={msg.author} content={msg.message}></ChatItem>)\r\n                }\r\n            }\r\n            this.setState({\r\n                list: this.messageList,\r\n                prevAuthor: msg.author\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"chat-body\">\r\n                <Scrollbars>\r\n                    <div style={{position: \"relative\", marginRight: \"15px\"}}>\r\n                        {this.state.list}\r\n                    </div>\r\n                </Scrollbars>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatBody;","import React from 'react'\r\nimport './chat.css'\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward'\r\n\r\nimport socketIOClient from 'socket.io-client'\r\nimport { db } from '../firebase/firebase'\r\nconst ENDPOINT = 'https://ec2-52-91-127-119.compute-1.amazonaws.com:8000/'\r\n\r\nclass ChatInput extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.socket = undefined\r\n        this.state = {\r\n            text: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.socket = socketIOClient(ENDPOINT)\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            text: event.target.value\r\n        })\r\n    }\r\n\r\n    handleClick = () => {\r\n        if (this.state.text == \"\") {\r\n            return false\r\n        }\r\n\r\n        let text = this.state.text\r\n        let author = this.props.author\r\n        db.collection(\"courses\").where(\"courseid\", \"==\", this.props.course).get().then(snapshot => { \r\n            snapshot.forEach(doc => {\r\n                console.log(doc.data())\r\n                db.collection(\"courses\").doc(doc.id).collection(\"channels\").where(\"channelid\", \"==\", this.props.channelList[this.props.channelChoice]).get().then(channels => {\r\n                    channels.forEach(channel => {\r\n                        console.log(channel.id)\r\n                        let nextNum = channel.data().nummessages\r\n                        db.collection(\"courses\").doc(doc.id).collection(\"channels\").doc(channel.id).collection(\"messages\").doc(nextNum + \"\").set({\r\n                            author,\r\n                            text\r\n                        })\r\n                        db.collection(\"courses\").doc(doc.id).collection(\"channels\").doc(channel.id).update({\r\n                            nummessages: nextNum + 1\r\n                        })  \r\n                    })\r\n                })\r\n            })\r\n        })\r\n\r\n        this.setState({\r\n            text: \"\"\r\n        })\r\n        this.socket.emit('sendMessage', text, author)\r\n    }\r\n\r\n    handleKeyPress = (e) => {\r\n        if(e.key === 'Enter') {\r\n            this.handleClick()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id= \"chat-input-container\">\r\n                <input onKeyPress={this.handleKeyPress} autoComplete=\"off\" placeholder= \"Type your message...\" value={this.state.text} onChange= {this.handleChange} id= \"chat-input\">\r\n                </input>\r\n                <button onClick={this.handleClick} id= \"chat-send\">\r\n                    <ArrowUpwardIcon id=\"send-icon\">\r\n\r\n                    </ArrowUpwardIcon>\r\n                </button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatInput","import React, {useState} from 'react'\r\nimport './chat.css'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport { styled } from '@material-ui/core/styles';\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nconst ENDPOINT = 'https://ec2-52-91-127-119.compute-1.amazonaws.com:8000/'\r\nconst socket = socketIOClient(ENDPOINT)\r\nconst SelectBlock = styled(Select)({\r\n    height: '35px',\r\n    backgroundColor: '#1C375B',\r\n    fontSize: '12px',\r\n    padding: 0,\r\n    paddingLeft: '10px',\r\n    color: '#ffffff',\r\n    fontFamily: 'Roboto',\r\n    marginRight: '15px',\r\n    borderRadius: \"10px\"\r\n})\r\n\r\nclass Courses extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            clientCount: 0,\r\n            selectedOption: {\r\n                value: 0,\r\n                type: 0\r\n            }\r\n        }\r\n    }\r\n       \r\n    handleSelect = (e) =>{\r\n        this.setState({\r\n            selectedOption: e.target.value\r\n        }, () => {\r\n            this.props.click(this.state.selectedOption)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        socket.on('num clients', (num) => {\r\n            this.setState({\r\n                clientCount: num\r\n            })\r\n        })\r\n\r\n        return (\r\n            <div className= \"course-info-container\">\r\n                <div className= \"course-writeup\">\r\n                    <h1 className= \"course-title\">\r\n                        Test\r\n                    </h1>\r\n                    <p className= \"people-count\"><span>69 Members</span> • <span>{this.state.clientCount / 3} Online</span></p>\r\n                </div>\r\n                <SelectBlock value= {this.state.selectedOption} onChange= {(e) => this.handleSelect(e)} disableUnderline>\r\n                    <MenuItem value= {{value: 0, type: 0}}># General</MenuItem>\r\n                    <MenuItem value= {{value: 1, type: 0}}># Study Help</MenuItem>\r\n                </SelectBlock>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Courses","import React from 'react'\r\nimport './chat.css';\r\nimport ChatBody from './ChatBody'\r\nimport ChatInput from './ChatInput'\r\nimport Courses from './courses'\r\nimport { render } from '@testing-library/react';\r\n\r\nclass Chat extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            courseid: this.props.currentCourseID,\r\n            authorInstance: this.props.author,\r\n            channelList: this.props.allRooms,\r\n            selected: 0,\r\n            currentRoomType: 0,\r\n            body : <ChatBody course= {this.props.currentCourseID} channel= {this.props.allRooms[0].roomId} author={this.props.author}></ChatBody>,\r\n            input : <ChatInput course={this.props.currentCourseID} channelChoice={0} channelList= {this.props.allRooms} author={this.props.author}></ChatInput>,\r\n            idContainer : \"chat-container\"\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.currentCourseID == this.props.currentCourseID) {\r\n            return false\r\n        }\r\n\r\n        this.setState({\r\n            courseid: this.props.currentCourseID,\r\n            authorInstance: this.props.author,\r\n            channelList: this.props.allRooms\r\n        }, () => {\r\n            let {authorInstance, channelList} = this.state\r\n            if (this.state.currentRoomType === 0) {\r\n                this.setState({\r\n                    body : <ChatBody course= {this.state.courseid} channel= {channelList[this.state.selected].roomId} author={authorInstance}></ChatBody>,\r\n                    input : <ChatInput course={this.state.courseid} channelChoice={this.state.selected} channelList= {channelList} author={authorInstance}></ChatInput>,\r\n                    idContainer : \"chat-container\"\r\n                })\r\n            } else if (this.state.currentRoomType === 1) {\r\n                // this.setState({\r\n                //     body : <ChatBody course= {this.state.courseid} channel= {channelList[this.state.selected].roomId} author={authorInstance}></ChatBody>,\r\n                //     input : <ChatInput course={courseid} channelChoice={this.state.selected} channelList= {channelList} author={authorInstance}></ChatInput>,\r\n                //     idContainer : \"chat-container\"\r\n                // })\r\n            } else if (this.state.currentRoomType == 2) {\r\n                // body = <DrawingBody id={\"drawing-style\"}/>\r\n                this.setState({\r\n                    idContainer: \"chat-container\"\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    getCourseSelect = (num) => {\r\n        this.setState({\r\n            selected: num.value,\r\n            currentRoomType: num.type\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={this.state.idContainer}>\r\n                <Courses click={(num) => this.getCourseSelect(num)}></Courses>\r\n                {this.state.body}\r\n                {this.state.input}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Chat","import React from 'react'\r\nimport './sidebarbuttons.css'\r\n\r\nfunction SideBarButton(props) {\r\n    let classNameOuter = \"notSelected\"\r\n    if (props.selected){\r\n        classNameOuter = \"selected\"\r\n    }\r\n    return (\r\n        <div className={classNameOuter + \" constant\"}>\r\n            <div className={\"sidebarbuttons\"} onClick={props.onClick} style={{background: \"#\" + props.backgroundColor}}>\r\n                {/*<img className=\"courseIconImage\" src={props.imageSrc} />*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBarButton","import React from 'react'\r\nimport './sidebar.css'\r\nimport SideBarButton from \"./sidebarbuttons\";\r\n\r\nfunction SideBar(props) {\r\n    console.log(props)\r\n    let buttons = props.allCourses.map((course, index) => {\r\n            return <SideBarButton\r\n                    key={course.id}\r\n                    selected={course.selected}\r\n                    onClick={() => {props.changeCurrentCourseID(course.id, index)}} //Assuming here that course id is given as course.id*********\r\n                    imageSrc={course.imageLink} //Assuming here that the course image is given as imageLink*******\r\n                    backgroundColor={course.backgroundColor}\r\n                />\r\n        }\r\n    )\r\n    return (\r\n        <div className= \"sidebar\">\r\n            <div id='fillerButtonsSidebar' />\r\n            {buttons}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBar","import React from 'react';\nimport Chat from './chat/chat'\nimport SideBar from './sidebar/sidebar'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      author: this.props.author,\n      allCoursesList: this.props.allCoursesList,\n      currentCourseID: this.props.allCoursesList[0].id,\n      allRooms: this.props.allRooms\n    }\n  }\n\n  changeCurrentCourseID = (courseID, index) => {\n    let tempAllCourses = [...this.state.allCoursesList]\n    for(let i = 0; i < tempAllCourses.length; i++){\n      if(tempAllCourses[i].id === this.state.currentCourseID){\n          tempAllCourses[i].selected = false\n          break;\n      }\n    }\n    tempAllCourses[index].selected = true\n\n    this.setState({\n      currentCourseID: courseID,\n      allCoursesList: tempAllCourses\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Chat allRooms={this.state.allRooms} currentCourseID={this.state.currentCourseID} author={this.props.author}></Chat>\n        <SideBar allCourses={this.state.allCoursesList} author= {this.state.author} changeCurrentCourseID= {this.changeCurrentCourseID}></SideBar>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"typeface-roboto\";\nimport App from './App';\n\nlet allCoursesList = [];\nlet allRooms = [];\nlet author = \"\";\n\nfunction begin () {\n    author = \"Bob Ross\";\n    // pulled from the user\n    allCoursesList = [\n        {courseTitle: 'Anatomy', selected: true, id: \"MTQ3ODcyMzU4NTFa\", imageLink: \"https://lh6.googleusercontent.com/-7Ww0toY0P1s/VN0op12wi-I/AAAAAAAAAVs/GUcBQ4yvdPw/w984-h209-no/164_windows_ltblue.jpg\"},\n        {courseTitle: 'History', selected: false, id: \"MTE4NzM2NTQ5MzA1\", imageLink: \"https://gstatic.com/classroom/themes/img_read.jpg\"},\n        {courseTitle: 'Calculus', selected: false, id: \"MTE4NzMyMzg3NjYy\", imageLink: \"https://gstatic.com/classroom/themes/img_reachout.jpg\"},\n    ]\n\n    for (let i = 0; i < allCoursesList.length; i++){\n        let randomColor = Math.floor(Math.random()*16777215).toString(16);\n        allCoursesList[i].backgroundColor = randomColor\n    }\n\n    allRooms = [\n      {\n        roomId: 0,\n        roomType: 0\n      },\n      {\n        roomId: 1,\n        roomType: 0\n      }\n    ]\n}\n\nbegin()\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App allCoursesList={allCoursesList} author={author} allRooms= {allRooms}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}